import cv2
from ultralytics import YOLO
import easyocr
import numpy as np
import time
import os

# Folder penyimpanan gambar
save_dir = "C:/Users/Public/Documents/Codes/Captured Image"
os.makedirs(save_dir, exist_ok=True)

# Muat model YOLO
model = YOLO("C:/Users/Public/Documents/Codes/yolov10/runs/detect/train10/weights/best.pt")

# Inisialisasi EasyOCR
reader = easyocr.Reader(['en', 'id'])

# Buka kamera
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Kamera tidak dapat dibuka.")
    exit()

# Status deteksi
detection_active = False
last_detection_time = time.time()
detection_cooldown = 5.0  # jeda antar deteksi

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Gagal membaca frame.")
        break

    current_time = time.time()
    if not detection_active and (current_time - last_detection_time) > detection_cooldown:
        results = model.predict(frame, conf=0.25, verbose=False)
        result = results[0]
        boxes = result.boxes.xyxy

        if len(boxes) > 0:
            detection_active = True
            last_detection_time = current_time

            x1, y1, x2, y2 = map(int, boxes[0])
            print(f"Koordinat bounding box: ({x1}, {y1}, {x2}, {y2})")

            cropped_image = frame[y1:y2, x1:x2]

            # Pra-proses OCR
            gray = cv2.cvtColor(cropped_image, cv2.COLOR_BGR2GRAY)
            _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            enhanced = cv2.convertScaleAbs(thresh, alpha=1.2, beta=10)

            # OCR dengan EasyOCR
            ocr_results = reader.readtext(enhanced)
            combined_texts = []
            fallback_text = ""
            min_conf = 0.3

            if ocr_results:
                print("Teks yang terdeteksi:")
                for (bbox, text, prob) in ocr_results:
                    print(f"Teks: {text}, Probabilitas: {prob:.2f}")
                    # Bersihkan dan konversi ke huruf besar tanpa spasi
                    cleaned_text = text.replace(" ", "").strip().upper()
                    if prob >= min_conf:
                        combined_texts.append(cleaned_text)
                    fallback_text = cleaned_text  # simpan sebagai fallback jika tidak lolos threshold

                # Gabungkan teks atau pakai fallback
                final_text = "".join(combined_texts) if combined_texts else fallback_text
                print(f"Teks Plat Nomor : {final_text}")
            else:
                print("Tidak ada teks yang terdeteksi.")

            # Gambar bounding box
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, "Plate Detected", (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Simpan gambar
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            save_path = os.path.join(save_dir, f"detected_plate_{timestamp}.png")
            cv2.imwrite(save_path, cropped_image)
            print(f"Gambar disimpan sebagai: {save_path}")

    cv2.imshow("Live Detection", frame)

    if detection_active and (current_time - last_detection_time) > detection_cooldown:
        detection_active = False

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
